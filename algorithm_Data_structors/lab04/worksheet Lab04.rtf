{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red0\green29\blue164;\red9\green9\blue9;\red18\green51\blue230;
\red10\green79\blue103;\red114\green0\blue130;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c11373\c64314;\csgenericrgb\c3529\c3529\c3529;\csgenericrgb\c7059\c20000\c90196;
\csgenericrgb\c3922\c30980\c40392;\csgenericrgb\c44706\c0\c50980;}
\margl1440\margr1440\vieww13500\viewh12900\viewkind1
\deftab720
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 Lab 4 Worksheet\
\
Answer the following questions by modifying this text file. Add your answer below each question.\
\
\
1. Which two binarySearch tests are failing?\
The second and the third binary searches are failing. That is which print statements are getting executed. \
\
2. What are the values of arr and goal passed in to binary search?\
Values of arr [0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5\
Goal = 2\
\
3. For each of the two cases of binarySearch that are failing, which return statements are they executing in error (is it returning true when it should be returning false, or the other way around)?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f1\fs26 \cf2 int\cf3 [] \cf0 arr1 \cf3 = \cf2 new int\cf3 []\{\cf4 1\cf3 , \cf4 2\cf3 , \cf4 3\cf3 , \cf4 4\cf3 , \cf4 5\cf3 \};
\f0\fs24 \cf0 \

\f1\fs26 \cf2 if \cf3 (\cf0 Part1\cf3 .
\f2\i \cf5 binarySearch
\f1\i0 \cf3 (\cf0 arr1\cf3 , \cf4 0\cf3 ) == \cf2 true\cf3 )\
When executing the second iteration, 1 becomes the high and zero becomes the low. When the mid is calculated (1+0)/2, it is rounded down to zero, which matches the goal and returns true. This is incorrect, returning true when it should be returning false. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 \
\
4. What is the bug in binarySearch? How do you fix it?\
The bug is that the binary search is using the values of the indices and not the actual values that are stored within those indices\'85. It should compare the value at the indices with the goal, not the indice itself before making the decision to return true or false. \
This should fix it. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs26 \cf3   
\f1 \cf2 public static boolean \cf5 binarySearch\cf3 (\cf2 int\cf3 [] arr, \cf2 int \cf3 goal) \{\
    \cf2 int \cf3 low = \cf4 0\cf3 , high = arr.\cf6 length \cf3 - \cf4 1\cf3 , mid = \cf4 0\cf3 ;\
    \cf2 while \cf3 (low <= high) \{\
      mid = (low + high) / \cf4 2\cf3 ;\
      \cf2 if \cf3 (goal == arr[mid]) \{\
        \cf2 return true\cf3 ;\
      \} \cf2 else if \cf3 (goal < arr[mid]) \{\
        high = mid - \cf4 1\cf3 ;\
      \} \cf2 else \cf3 \{\
        low = mid + \cf4 1\cf3 ;\
      \}\
    \}\
    \cf2 return false\cf3 ;\
  \}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 \
\
5. Which loops appear to be inifinite?\
Loop 2, 4, \
\
\
6. For the loops that you found to be infinite, briefly explain why they are never progressing.\
\
In loop 2, b is initialized to zero then regularly multiplied by itself. The condition in the loop Is b < 10, but it never reaches because it keeps multiplying by itself (0).\
\
Loop 4. The condition is that f > 0, but fi is c (-1) is subtracted from F, then multiplied by -1, and repeated forever. So f just gets +1, -1 forever and never reaches 0. Infinity!\
\
\
7. What does the call to password.split(" ") appear to do? Hint: examine the input value of "password", then examine the items in the "tokens" array returned by the call.\
\
It splits the input password based on spaces and returns an array with those values. \
Split can be based on whatever the input is. \
\
8. What is the correct password?\
\
The correct password is \'931 4 9 16 25\'94\
\
}